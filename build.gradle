plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'checkstyle'
	id 'pmd'
	id 'com.diffplug.spotless' version '7.2.1'
	id 'maven-publish'
	id "com.github.ben-manes.versions" version "0.52.0"
}

group = 'com.preetam'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	withSourcesJar()
	withJavadocJar()
}

jar {
	from('LICENSE') { into 'META-INF' }
	from('NOTICE') { into 'META-INF' }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	implementation 'org.apache.commons:commons-compress:1.28.0'
	implementation 'org.eclipse.jgit:org.eclipse.jgit:7.3.0.202506031305-r'
	implementation 'commons-validator:commons-validator:1.10.0'
	implementation 'commons-beanutils:commons-beanutils:1.11.0'
	implementation 'dnsjava:dnsjava:3.6.3'
	implementation 'com.github.ben-manes.caffeine:caffeine:3.2.2'
	implementation 'com.bucket4j:bucket4j_jdk17-core:8.14.0'
	implementation 'jakarta.validation:jakarta.validation-api:3.1.1'

	compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.assertj:assertj-core'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport', 'jacocoTestCoverageVerification'
}

jacoco {
	toolVersion = "0.8.13"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
}

jacocoTestCoverageVerification {
	dependsOn test
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
		}
	}
}

checkstyle {
	toolVersion = '10.26.1'
	configFile = rootProject.file('config/checkstyle/google_checks.xml')
}

pmd {
	toolVersion = '7.16.0'
	ruleSets = [
			'category/java/bestpractices.xml',
			'category/java/design.xml',
			'category/java/codestyle.xml',
			'category/java/documentation.xml',
			'category/java/errorprone.xml',
			'category/java/multithreading.xml',
			'category/java/performance.xml',
			'category/java/security.xml'
	]
	ignoreFailures = false
}

tasks.withType(Pmd).configureEach {
	reports {
		xml.required.set(false)
		html.required.set(true)
	}
}

spotless {
	java {
		licenseHeaderFile 'LICENSE_HEADER'
		target 'src/**/*.java'
	}
}

tasks.withType(Checkstyle).configureEach {
	ignoreFailures = false
	reports {
		xml.required = false
		html.required = true
	}
	doFirst {
		println "Running Checkstyle: $name"
	}
	doLast {
		def reportFile = layout.buildDirectory.file("reports/checkstyle/${name}.html").get().asFile
		if (reportFile.exists() && reportFile.text.contains("violation")) {
			throw new GradleException("Checkstyle violations detected! Failing the build.")
		}
	}
}

check.dependsOn checkstyleMain, checkstyleTest, pmdMain, pmdTest, jacocoTestCoverageVerification
build.dependsOn check

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifact bootJar

			pom {
				name = 'Email Validator'
				description = 'A robust Java library for validating email addresses and MX records.'
				url = 'https://github.com/preetampotdar/email-validator'

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution = 'repo'
					}
				}

				developers {
					developer {
						id = 'preetampotdar'
						name = 'Preetam Potdar'
						email = 'preetam1@outlook.com'
					}
				}

				scm {
					connection = 'scm:git:git://github.com/preetampotdar/email-validator.git'
					developerConnection = 'scm:git:ssh://github.com:preetampotdar/email-validator.git'
					url = 'https://github.com/preetampotdar/email-validator'
				}
			}
		}
	}
}
